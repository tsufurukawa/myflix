== Myflix Overview

Myflix is a production quality e-commerce application, a Netflix clone, built on
the Ruby on Rails framework. This was the final course project at the online web development
bootcamp Tealeaf Academy (http://www.gotealeaf.com). The UI mockup was provided by the 
Tealeaf instructors. We implemented the entire backend of the application using the Github workflow 
and Test Driven Development.

The deployed application can be seen here:

http://tl-myflix-furukawa-staging.herokuapp.com/

You can either sign in with "admin@example.com" and "password" or register for an account with credit card number "4242424242424242" and Security Code "123". The former method will sign you in as an Administrator and the latter as a regular user. Also note this is the "staging" application and not the "production" application - though the two are almost identical, I have decided to post the staging app so users can sign in with a fake credit card.

== Key Features

The features of Myflix include: full payment processing, administration capabilities,
social networking, email sending, testing and much more. A more detailed breakdown of the
key features and the technologies utilized to implement these features are outlined below.

== Test Driven Development
Followed the "Red, Green, Refactor" pattern to drive out the implementation code and 
manage complexity in the growing codebase. The comprehensive test suite covers nearly all 
aspects of the application - from models, controllers, service objects, and to integrated 
feature specs. 

The major tools used are:

* RSpec - the framework used for all tests
* Capybara - to emulate end user "browser experience" (integration tests)
* VCR - to record outgoing HTTP interactions with 3rd party API services in order to expedite testing
* Mocking / Stubbing - to isolate the "Object Under Test" from all other collaborating objects
* Macros / Shared Examples - to DRY up and avoid duplicate code

== Social Networking
Myflix implements two social networking features:

* Twitter-like "Following / Followed" feature using self-referential ActiveRecord association. 
* The ability to invite other users to the application. The invitee is sent an email containing a link directed to the user registration page. The link routes to a unique URL through a randomly generated invitation token.

== Backround Jobs and Sidekiq
Email sending was offloaded to background processes to mitigate slow web responses and to provide 
better user experience. Sidekiq's delayed extensions were used to deliver the emails asynchronously.
Example:

  AppMailer.delay.send_welcome_email(user)

== e-Commerce - Stripe Integration
Myflix interfaces with the Stripe API to handle customer payments. An API wrapper was implemented 
to centralize and isolate all interactions with the Stripe service. Some key features are:

* Creating subscriptions to charge customers on a monthly basis.
* Accepting payments with a custom form using Stripe.js.
* Responding to webhooks on successful and failed charge events.
* Suspending a user account following a failed credit card charge.

The Stripe wrapper was fully tested with VCR so that all interactions with the Stripe server 
were recorded once on the first test run and replayed for all subsequent runs.

== Amazon S3
Amazon S3 was used for storing static assets, mainly images (and some videos) uploaded by the Administrator.
File uploading was accomplished using the Carrierwave gem, while integration with S3 was achieved using
the Fog gem.

== Privileges and Access Control
Myflix has two different types of users or "actors" - a regular user and an Administrator (admin). An admin can interact with
the application in two additional ways:

* Create or upload new videos.
* View a list of recent payments made by customers.

These logic specific to the admin were segregated by namespacing them to separate controller actions.

  namespace :admin do
    resources :videos, only: [:new, :create]
    resources :payments, only: [:index]
  end

== Objected Composition and Objected Oriented Design
Complexity of the application was managed by breaking down large pieces of complex logic into small components
with simple responsibilities. We used two object-oriented design patterns to facilitate this process.

* Decorators - A simple decorator was used to segregate the presentational logic from the Video model. Specifically, the logic for displaying video ratings were refactored and moved to the VideoDecorator - effectively allowing us to test domain and presentation logics separately.
* Service Objects - The user signup process was refactored into a service object to make this key business process in our application domain more explicit. 

== Deployment Pipeline / Multiple Environments
A simple deployment pipeline was used to develop our application and can be summarized as below:

  run entire test suite locally -> deploy to staging and test -> deploy to production

The Paratrooper gem was used to simply the deployment process with quick and concise rake tasks. In addition, the Sentry gem was implemented to set up an error monitoring service on production.  
